#!/bin/bash
csvpath=/usr/share/exploitdb
TAGS=


# if files.csv is in the searchsploit path, use that
if [ -f "$( dirname $0 )/files.csv" ]; then
    csvpath="$( dirname $0 )/files.csv"
fi


# usage info
function usage()
{
    echo "Usage: $progname term1 [term2] ... [termN]"
    echo "Example: $progname oracle windows local"
    echo 
    echo "======="
    echo "Options"
    echo "======="
    echo
    echo "   -c                Perform case-sensitive searches; by default, searches will"
    echo "                      try to be greedy"
    echo "   -h, --help    Show help screen" 
    echo "   -v                By setting verbose output, description lines are allowed to"
    echo "                      overflow their columns"
    echo
    echo "*NOTES*"
    echo "Depends on ack-grep (apt-get install ack-grep)."
    echo "Searches file contents for 'term' instead of just exploit-db vuln summary."
    echo "Use any number of search terms you would like (minimum of one)."
    echo "Search terms are not case sensitive, and order is irrelevant."
    exit 1
}


# set column width
COL2=35
COL1=$(( `tput cols` - $COL2 - 1 ))


# check for empty args
if [ $# -eq 0 ]; then
    usage >&2
fi

# parse arguments
ARGS="-"
for param in $@; do
    if [ "$param" == "--help" ]; then
        usage >&2
    else
        if [ "${param:0:1}" == "-" ]; then
            ARGS=$ARGS${param:1}
            shift
            continue
        fi
        TAGS="$TAGS $param"
    fi
done


# print header
printf "%-${COL1}s %s" " Description"
echo "   Path"
printf "%0.s-" `eval echo {1..$(( $COL1 + 1 ))}`
echo -n " "
printf "%0.s-" `eval echo {1..$(( $COL2 - 1 ))}`
echo

ARG1=$(echo $TAGS | awk '{print $1}' | tr -d ' ')
SEARCH=
for tag in $(echo $TAGS | cut -d' ' -f2-); do
    if [ "$SEARCH" ]; then
        SEARCH="$SEARCH |"
    fi
    SEARCH="$SEARCH ack-grep -iQ $tag"
done


# set LANG variable to avoid illegal byte sequence errors in sed
LANG=C


# format, search and print results
FORMAT=$COL1

for file in $(ack-grep --sort-files -iQ $ARG1 $csvpath/* | $SEARCH | cut -d':' -f1 | uniq | sed "s,$csvpath/platforms,,"); do
    grep $file $csvpath/files.csv \
    | awk -F"\"*,\"*" '{ printf "%-'$FORMAT's | %s\n", $3, $2}'
done

exit 0